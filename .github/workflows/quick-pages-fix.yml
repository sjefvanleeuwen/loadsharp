name: Quick Pages Fix

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Required permissions for GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Prevent concurrent deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy-simple-pages:
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Create simple documentation site
      run: |
        mkdir -p _site
        
        # Create a simple index.html with LoadSharp info
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>LoadSharp - .NET Load Testing Framework</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 2rem;
                    line-height: 1.6;
                    color: #24292f;
                    background: #ffffff;
                }
                .header {
                    text-align: center;
                    margin-bottom: 3rem;
                    padding: 2rem;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border-radius: 12px;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                }
                .header h1 {
                    font-size: 3rem;
                    margin: 0 0 1rem 0;
                    font-weight: 700;
                }
                .header p {
                    font-size: 1.2rem;
                    margin: 0;
                    opacity: 0.9;
                }
                .badges {
                    margin-top: 1rem;
                }
                .badge {
                    display: inline-block;
                    margin: 0.2rem;
                }
                .grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 2rem;
                    margin: 2rem 0;
                }
                .card {
                    background: #f6f8fa;
                    padding: 1.5rem;
                    border-radius: 8px;
                    border: 1px solid #d0d7de;
                }
                .card h3 {
                    color: #0969da;
                    margin-top: 0;
                }
                .code-block {
                    background: #161b22;
                    color: #f0f6fc;
                    padding: 1rem;
                    border-radius: 6px;
                    overflow-x: auto;
                    margin: 1rem 0;
                }
                .btn {
                    display: inline-block;
                    padding: 0.75rem 1.5rem;
                    background: #0969da;
                    color: white;
                    text-decoration: none;
                    border-radius: 6px;
                    margin: 0.5rem 0.5rem 0.5rem 0;
                    font-weight: 500;
                }
                .btn:hover {
                    background: #0860ca;
                }
                .success {
                    color: #1a7f37;
                    font-weight: 600;
                }
                .feature-list {
                    list-style: none;
                    padding: 0;
                }
                .feature-list li {
                    padding: 0.5rem 0;
                    padding-left: 1.5rem;
                    position: relative;
                }
                .feature-list li:before {
                    content: "‚úÖ";
                    position: absolute;
                    left: 0;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üöÄ LoadSharp</h1>
                <p>Minimal, MIT-licensed load testing framework for .NET 9</p>
                <div class="badges">
                    <img src="https://github.com/sjefvanleeuwen/loadsharp/workflows/Build%20and%20Test/badge.svg" alt="Build Status" class="badge">
                    <img src="https://img.shields.io/badge/tests-18%20passing-brightgreen" alt="Tests" class="badge">
                    <img src="https://img.shields.io/badge/coverage-22.1%25-red" alt="Coverage" class="badge">
                    <img src="https://img.shields.io/badge/license-MIT-green" alt="License" class="badge">
                </div>
                <p class="success">‚úÖ GitHub Pages Successfully Deployed!</p>
            </div>
            
            <div class="grid">
                <div class="card">
                    <h3>üéØ Quick Start</h3>
                    <div class="code-block">dotnet add package LoadSharp</div>
                    <p>Get started with LoadSharp in seconds. Simple, powerful load testing for .NET applications.</p>
                    <a href="https://github.com/sjefvanleeuwen/loadsharp" class="btn">View on GitHub</a>
                </div>
                
                <div class="card">
                    <h3>üìä Features</h3>
                    <ul class="feature-list">
                        <li>Scenario-based load testing</li>
                        <li>Async C# step definitions</li>
                        <li>Built-in HTTP client support</li>
                        <li>Real-time metrics collection</li>
                        <li>GitOps pipeline integration</li>
                        <li>MIT Licensed</li>
                    </ul>
                </div>
                
                <div class="card">
                    <h3>üß™ Example Usage</h3>
                    <div class="code-block">var scenario = new Scenario("Test")
    .WithStep("GET /api", async ctx => {
        var res = await ctx.HttpClient
            .GetAsync("https://api.example.com");
        return res.IsSuccessStatusCode;
    })
    .WithVirtualUsers(10)
    .WithDuration(TimeSpan.FromSeconds(30));

await LoadRunner.RunAsync(scenario);</div>
                </div>
                
                <div class="card">
                    <h3>üîÑ CI/CD Pipeline</h3>
                    <p>Complete GitOps workflow with automated testing, quality gates, and releases.</p>
                    <ul class="feature-list">
                        <li>Automated testing with xUnit</li>
                        <li>Code coverage analysis</li>
                        <li>Quality gate validation</li>
                        <li>NuGet package publishing</li>
                        <li>GitHub Pages deployment</li>
                    </ul>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 3rem; padding: 2rem; background: #f6f8fa; border-radius: 8px;">
                <h3>üìñ Documentation & Resources</h3>
                <a href="https://github.com/sjefvanleeuwen/loadsharp/blob/main/readme.md" class="btn">README</a>
                <a href="https://github.com/sjefvanleeuwen/loadsharp/actions" class="btn">CI/CD Pipeline</a>
                <a href="https://github.com/sjefvanleeuwen/loadsharp/releases" class="btn">Releases</a>
                <a href="https://github.com/sjefvanleeuwen/loadsharp/issues" class="btn">Issues</a>
            </div>
            
            <footer style="text-align: center; margin-top: 3rem; padding: 2rem; border-top: 1px solid #d0d7de; color: #656d76;">
                <p>Built with ‚ù§Ô∏è for the .NET community | MIT Licensed</p>
                <p>Generated: $(date)</p>
            </footer>
        </body>
        </html>
        EOF
        
        # Copy README content as markdown page
        if [ -f "readme.md" ]; then
          cp readme.md _site/readme.md
        fi
        
        # Copy test results if available
        if [ -f "docs/test-results.md" ]; then
          mkdir -p _site/docs
          cp docs/test-results.md _site/docs/
        fi
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
